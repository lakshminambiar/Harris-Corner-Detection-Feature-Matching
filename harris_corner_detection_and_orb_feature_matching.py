# -*- coding: utf-8 -*-
"""Harris Corner Detection and ORB Feature matching.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15CdH8j808pMrIdZPInW8Gfmul0MncKeg

Import necessary libraries
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab.patches import cv2_imshow
import cv2
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import matplotlib.image as mpimg
import os

"""Read Reference and Target images"""

target_image = cv2.imread('INPUT TARGET IMAGE PATH FROM YOUR DIRECTORY')
reference_image = cv2.imread('INPUT REFERENCE IMAGE PATH FROM YOUR DIRECTORY')

"""Convert Target and Reference Images to Grayscale"""

def convert_gray(target,references):
    target_rgb = cv2.cvtColor(target, cv2.COLOR_BGR2RGB)
    r2_rgb = cv2.cvtColor(references, cv2.COLOR_BGR2RGB)
    target_gray = cv2.cvtColor(target_rgb, cv2.COLOR_RGB2GRAY)
    r2_gray = cv2.cvtColor(r2_rgb, cv2.COLOR_RGB2GRAY)
    return(target_gray,r2_gray)

target_img_gray,r2_img_gray =convert_gray(target_image,reference_image)

target_float = np.float32(target_img_gray)
r2_float = np.float32(r2_img_gray)

"""Harris-Corner Detection Algorithm"""

def HarrisCorner(target_float,r2_float):
    #Detect Corners
    corners_target = cv2.cornerHarris(target_float,2,3,0.04)
    corners_reference = cv2.cornerHarris(r2_float,2,3,0.04)
    corners_target = cv2.dilate(corners_target, None)
    target_image[corners_target>0.01*corners_target.max()] = [0,0,255]
    corners_reference = cv2.dilate(corners_reference, None)
    reference_image[corners_reference>0.01*corners_reference.max()] = [0,0,255]
    
    #Get Keypoints from Corners detected by Harris-Corner Detection
    keypoints_target = [cv2.KeyPoint(float(x[1]),float(x[0]), 20) for x in corners_target]
    keypoints_reference = [cv2.KeyPoint(float(x[1]),float(x[0]), 20) for x in corners_reference]

    return keypoints_target,keypoints_reference

kp_target, kp_reference = HarrisCorner(target_float,r2_float)

"""ORB FEATURE MATCHING"""

orb = cv2.ORB_create()
kp1,des1 = orb.compute(target_img_gray,kp_target,None)
kp2,des2 = orb.compute(r2_img_gray,kp_target,None)
bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
matches = bf.match(des1, des2)
matches = sorted(matches, key=lambda x: x.distance)
print(len(matches))
target_matches = cv2.drawMatches(target_img_gray, kp1, r2_img_gray, kp2, matches[:20], None, flags=2)
cv2_imshow( target_matches)
cv2.waitKey(0)